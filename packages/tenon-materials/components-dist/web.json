{"Base":{"Button":{"view":{"el":"ArcoButton","props":{"t-bind":"buttonProps"},"children":[{"el":"span","props":{"t-if":"this.buttonText.value"},"children":["{{this.buttonText.value}}"],"type":"Element"},{"el":"Compose-View","props":{"t-if":"this.buttonText.value === undefined || this.buttonText.value === ''","slotKey":"default","placeholder":"拖入组件生成按钮内容","tenonCompProps":"{{this.tenonCompProps}}","composeLayout":{"display":"flex","alignItems":"center","justifyContent":"center","flexWrap":"wrap"},"isSlot":true},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    var add = function () {\n        tenonComp.states.count.value++;\n    };\n    var subtract = function () {\n        tenonComp.states.count.value--;\n    };\n    return {\n        count: {\n            value: 0,\n        },\n        author: 'Doctorwu',\n        add: add,\n        subtract: subtract,\n    };\n}","doc":"","config":{"name":"Button","icon":"file","description":["Button组件"],"dependencies":[],"platform":["web"],"events":{"onClick":"点击时"},"schemas":[{"type":"object","title":"按钮文字","fieldName":"buttonText","properties":{"value":{"type":"string","title":"文本内容","default":""}}},{"type":"object","title":"按钮属性","fieldName":"buttonProps","properties":{"type":{"type":"select","title":"按钮类型","options":{"primary":"primary","secondary":"secondary","dashed":"dashed","outline":"outline","text":"text"},"default":"primary"},"shape":{"type":"select","title":"按钮形状","options":{"square":"square","round":"round","circle":"circle"},"default":"square"},"status":{"type":"select","title":"按钮状态","options":{"normal":"normal","warning":"warning","success":"success","danger":"danger"},"default":"normal"},"size":{"type":"select","title":"按钮大小","options":{"mini":"mini","small":"small","medium":"medium","large":"large"},"default":"medium"},"long":{"type":"boolean","title":"按钮的宽度是否随容器自适应","default":true},"loading":{"type":"boolean","title":"按钮是否为加载中状态","default":false},"disabled":{"type":"boolean","title":"按钮是否禁用","default":false},"html-type":{"type":"string","title":"button的原生type属性","default":"button"},"href":{"type":"string","title":"跳转链接","default":null}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"Icon":{"view":{"el":"TenonIcon","props":{"iconConfig":"{{this.iconConfig}}","style":"{{this.iconStyle}}"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Icon","icon":"thunderbolt","description":["Icon 是一个<基础组件>, Icon可以提供图标相关的能力"],"platform":["web"],"events":{"onClick":"点击时"},"schemas":[{"type":"object","title":"图标配置","fieldName":"iconConfig","properties":{"type":{"type":"icon-type","title":"图标种类","default":"thunder"},"size":{"type":"number","title":"图标大小","default":20},"strokeWidth":{"type":"number","title":"线宽","default":4},"strokeLinecap":{"type":"select","title":"端点类型","options":{"butt":"butt","round":"round","square":"square"},"default":"butt"},"strokeLinejoin":{"type":"select","title":"拐角类型","options":{"arcs":"arcs","bevel":"bevel","miter":"miter","miter-clip":"miter-clip","round":"round"},"default":"miter"},"spin":{"type":"boolean","title":"是否旋转","default":false}}},{"type":"custom","title":"图标样式","fieldName":"iconStyle","properties":{"color":{"type":"color","title":"图标颜色","default":"#000000"}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box","display":"inline-block"}}}},"Loading":{"view":{"el":"TenonLoading","props":{"t-bind":"loadingConfig"},"children":[{"el":"Compose-View","props":{"isSlot":true,"slotKey":"default","t-slot":"default","placeholder":"拖入组件生成加载完成后内容","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Loading","icon":"loading","description":["Loading组件, 提供展示加载能力"],"dependencies":[],"platform":["web"],"events":{},"schemas":[{"type":"object","title":"加载组件属性","fieldName":"loadingConfig","properties":{"loading":{"type":"boolean","title":"是否为加载中状态","default":false},"loadType":{"type":"select","title":"加载类型","options":{"spin":"spin加载","skeleton":"骨架屏"},"default":"spin"}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"Picture":{"view":{"el":"a-image","props":{"t-bind":"imageProps","style":"imageStyle"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Picture","icon":"file-image","description":["Picture 是一个<基础组件>，Picture提供基础的图片能力"],"dependencies":[["Image","@arco-design","@arco-design/web-vue"]],"platform":["web"],"schemas":[{"type":"custom","title":"组件属性","fieldName":"imageProps","properties":{"src":{"type":"string","title":"图片地址","default":"https://p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp"},"width":{"type":"string","title":"图片宽度","default":"100%"},"height":{"type":"string","title":"图片高度","default":"100%"},"preview":{"type":"boolean","title":"是否开启预览","default":false},"show-loader":{"type":"boolean","title":"是否显示加载中效果","default":true}}},{"type":"custom","title":"图片样式","fieldName":"imageStyle","properties":{"width":{"type":"string","title":"图片容器宽度"},"height":{"type":"string","title":"图片容器高度"},"display":{"type":"select","title":"布局","default":"block","options":{"block":"block","flex":"flex","inline-block":"inline-block","inline-flex":"inline-flex"}},"object-fit":{"type":"select","title":"图片适应方式","default":"contain","options":{"contain":"contain","cover":"cover","fill":"fill","inherit":"inherit","initial":"initial","none":"none","revert":"revert","scale-down":"scale-down","unset":"unset"}}}}]}},"Text":{"view":{"el":"TenonText","props":{"textValue":"{{this.textValue}}","textStyle":"{{this.textStyle}}"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Text","icon":"italic","description":["Text 是一个<基础组件>, Text可以提供文本相关的能力"],"platform":["web"],"schemas":[{"type":"object","title":"文本内容","fieldName":"textValue","properties":{"value":{"type":"string","title":"文本内容","default":"TEXT"}}},{"type":"internal","key":"textStyle","title":"文本样式","fieldName":"textStyle"}],"tenonProps":{"containerStyle":{"box-sizing":"border-box","display":"inline-block"}}}}},"DataDisplay":{"Alert":{"view":{"el":"ArcoAlert","props":{"t-bind":"alertConfig"},"children":[{"el":"Compose-View","props":{"slotKey":"action","placeholder":"拖入组件生成自定义操作","isSlot":true,"tenonCompProps":"{{this.tenonCompProps}}","t-slot":"action","t-if":"this.alertConfig.useCustomAction"},"type":"Element"},{"el":"Compose-View","props":{"slotKey":"default","tenonCompProps":"{{this.tenonCompProps}}","placeholder":"拖入组件生成提示内容","isSlot":true},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount, watch = lifeCycle.watch;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n        icon: 'icon-user'\n    };\n}","doc":"","config":{"name":"Alert","icon":"file","description":["Alert是一个<提示组件>, 提供提示能力"],"dependencies":[],"platform":["web"],"schemas":[{"type":"object","title":"提示组件配置","fieldName":"alertConfig","properties":{"type":{"type":"select","title":"提示的类型","default":"info","options":{"info":"info","warning":"warning","error":"error","success":"success"}},"title":{"type":"string","title":"提示的标题","default":""},"show-icon":{"type":"boolean","title":"展示图标","default":true},"closable":{"type":"boolean","title":"是否展示关闭按钮","default":false},"useCustomAction":{"type":"boolean","title":"是否使用自定义操作按钮","default":false},"banner":{"type":"boolean","title":"是否作为顶部公告使用（去除边框和圆角","default":false}}}],"tenonProps":{}}},"Avatar":{"view":{"el":"TenonAvatar","props":{"t-bind":"avatarConfig","style":"avatarStyle"},"children":[{"el":"DynamicComponent","props":{"is":"icon-user","style":"avatarIconStyle","t-slot":"trigger-icon"},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount, watch = lifeCycle.watch;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n        icon: 'icon-user'\n    };\n}","doc":"","config":{"name":"Avatar","icon":"file","description":["Avatar组件"],"dependencies":[],"platform":["web"],"schemas":[{"type":"object","title":"头像组件配置","fieldName":"avatarConfig","properties":{"size":{"type":"number","title":"头像大小","default":60},"textValue":{"type":"string","title":"头像文字","default":"Doctorwu"},"shape":{"type":"select","title":"头像形状","default":"circle","options":{"circle":"circle","square":"square"}},"withIcon":{"type":"boolean","title":"展示图标","default":true}}},{"type":"custom","title":"头像元素样式","fieldName":"avatarStyle","properties":{"width":{"type":"string","title":"宽度","default":"60px"},"height":{"type":"string","title":"高度","default":"60px"},"backgroundColor":{"type":"color","title":"背景颜色","default":"#5D61FF"}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box","display":"inline-block"}}}},"Carousel":{"view":{"el":"ArcoCarousel","props":{"style":"carouselStyle","t-bind":"carouselConfig"},"children":[{"el":"ArcoCarouselItem","props":{"t-for":"this.carouselConfig.pics","style":{"width":"75%","borderRadius":"8px","display":"flex","alignItems":"stretch","justifyContent":"stretch"}},"children":[{"el":"Picture","props":{"imageProps":{"src":"{{this.item}}","preview":true},"imageStyle":{"width":"100%","display":"flex","height":"100%"}},"type":"Element"}],"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Carousel","icon":"file","description":["Carousel组件"],"dependencies":[],"platform":["web"],"schemas":[{"type":"object","title":"轮播组件样式","fieldName":"carouselStyle","properties":{"width":{"type":"string","title":"轮播组件宽度","default":"100%"},"height":{"type":"string","title":"轮播组件高度","default":"120px"}}},{"type":"object","title":"轮播组件配置","fieldName":"carouselConfig","properties":{"pics":{"type":"array","title":"轮播图图片","listType":"carousel","default":["https://p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/cd7a1aaea8e1c5e3d26fe2591e561798.png~tplv-uwbnlip3yd-webp.webp","https://p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/0265a04fddbd77a19602a15d9d55d797.png~tplv-uwbnlip3yd-webp.webp","https://p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/6480dbc69be1b5de95010289787d64f1.png~tplv-uwbnlip3yd-webp.webp"]},"default-current":{"type":"number","title":"默认展示索引","default":1},"auto-play":{"type":"boolean","title":"是否自动播放","default":true},"move-speed":{"type":"number","title":"幻灯片移动速率(ms)","default":1000},"animationName":{"type":"select","title":"切换动画","default":"card","options":{"slide":"slide","fade":"fade","card":"card"}},"trigger":{"type":"select","title":"切换触发方式","default":"click","options":{"click":"click","hover":"hover"}},"direction":{"type":"select","title":"移动方向","default":"horizontal","options":{"horizontal":"horizontal","vertical":"vertical"}},"show-arrow":{"type":"select","title":"箭头显示时机","default":"hover","options":{"always":"always","hover":"hover","never":"never"}},"indicator-type":{"type":"select","title":"指示器类型","default":"line","options":{"line":"line","dot":"dot","slider":"slider","never":"never"}},"indicator-position":{"type":"select","title":"指示器位置","default":"outer","options":{"bottom":"bottom","top":"top","left":"left","right":"right","outer":"outer"}}}}]}},"Table":{"view":{"el":"TenonTable","props":{"t-bind":"tableConfig","style":"tableStyle"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount, watch = lifeCycle.watch;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n        icon: 'icon-user'\n    };\n}","doc":"","config":{"name":"Table","icon":"file","description":["Table组件"],"dependencies":[],"platform":["web"],"schemas":[{"type":"object","title":"表格配置","fieldName":"tableConfig","properties":{"columns":{"type":"table-column","title":"表格列","default":[{"dataIndex":"username","title":"用户名"},{"dataIndex":"email","title":"邮箱"}]},"data":{"type":"table-data","title":"表格数据","default":[{"username":"doctorwu","email":"wuzhdkelfodek@qq.com"},{"username":"test","email":"daskfjaewarld@qq.com"}]},"op":{"type":"boolean","title":"是否开启操作列","default":true}}},{"type":"custom","title":"表格样式","fieldName":"tableStyle","properties":{}}]}},"Tag":{"view":{"el":"ArcoTag","props":{"t-bind":"tagConfig"},"children":[{"el":"Compose-View","props":{"t-slot":"icon","slotKey":"icon","isSlot":true,"placeholder":"拖入图标","tenonCompProps":"{{this.tenonCompProps}}","composeLayout":{"display":"inline"},"t-if":"this.tagExtraConfig.useIcon"},"type":"Element"},{"el":"Compose-View","props":{"slotKey":"close-icon","isSlot":true,"t-slot":"close-icon","tenonCompProps":"{{this.tenonCompProps}}","placeholder":"拖入关闭图标","t-if":"this.tagExtraConfig.useCustomCloseIcon"},"type":"Element"},{"el":"span","props":{},"children":["{{this.tagConfig.tagValue}}"],"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount, watch = lifeCycle.watch;\n    onMounted(function () {\n        // console.log(tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n        icon: 'icon-user'\n    };\n}","doc":"","config":{"name":"Tag","icon":"tag","description":["Tag是一个<提示组件>, 提供标签能力"],"dependencies":[],"platform":["web"],"events":{"onClose":"点击关闭按钮时","onCheck":"用户选中时"},"schemas":[{"type":"object","title":"Tag组件配置","fieldName":"tagConfig","properties":{"tagValue":{"type":"string","title":"tag的文字","default":"一个tag"},"size":{"type":"select","title":"tag的大小","default":"medium","options":{"small":"小","medium":"中","large":"大"}},"color":{"type":"color","title":"tag的颜色","default":""},"loading":{"type":"boolean","title":"是否处于加载中","default":false},"closable":{"type":"boolean","title":"是否可关闭","default":false},"checkable":{"type":"boolean","title":"标签是否可选中","default":false},"checked":{"type":"boolean","title":"标签是否选中（标签可选中时可用）","default":false}}},{"type":"object","title":"Tag额外配置","fieldName":"tagExtraConfig","properties":{"useIcon":{"type":"boolean","title":"是否使用图标","default":false},"useCustomCloseIcon":{"type":"boolean","title":"是否使用自定义关闭图标","default":false}}}],"tenonProps":{"containerStyle":{"display":"inline-block"}}}}},"Form":{"CheckBox":{"view":{"el":"ArcoCheckbox","props":{"t-bind":"checkboxConfig","style":{"width":"100%"}},"children":[{"el":"span","props":{"t-if":"!this.checkboxConfig.useCustomCheckbox"},"children":["{{this.checkboxConfig.labelValue}}"],"type":"Element"},{"el":"Compose-View","props":{"t-if":"this.checkboxConfig.useCustomCheckbox","slotKey":"checkbox","isSlot":true,"t-slot":"checkbox","placeholder":"拖入组件生成复选框内容","useTeleport":"{{true}}","tenonCompProps":"{{this.tenonCompProps}}","composeLayout":{"width":"100%"}},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount, watch = lifeCycle.watch;\n    if (!tenonComp.propsBinding.hasBinding('checkboxConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('checkboxConfig', 'model-value', '$comp.states.selected');\n    }\n    onMounted(function () {\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                tenonComp.states.selected = args[0];\n                if (tenonComp.tenonCompProps.scopeSlotArgs) {\n                    tenonComp.tenonCompProps.scopeSlotArgs.checked = args[0];\n                }\n            }\n        });\n    });\n    return {\n        author: 'Doctorwu',\n        selected: false,\n    };\n}","doc":"","config":{"name":"CheckBox","icon":"file","description":["CheckBox组件"],"dependencies":[],"platform":["web"],"events":{"onChange":"值改变时"},"schemas":[{"type":"object","title":"CheckBox配置","fieldName":"checkboxConfig","properties":{"model-value":{"type":"boolean","title":"checkbox是否选中","internal":false,"default":false},"useCustomCheckbox":{"type":"boolean","title":"是否使用自定义复选框","default":false},"default-checked":{"type":"boolean","title":"默认是否选中","default":false},"labelValue":{"type":"string","title":"复选框label值","default":"复选框label"},"value":{"type":"string","title":"选中该选项对应的值","default":"123"},"disabled":{"type":"boolean","title":"是否禁用","default":false},"indeterminate":{"type":"boolean","title":"是否为半选状态","default":false}}}],"tenonProps":{"containerStyle":{}}}},"CheckBoxGroup":{"view":{"el":"ArcoCheckboxGroup","props":{"t-bind":"checkboxGroupConfig","style":{"width":"100%","boxSizing":"border-box"}},"children":[{"el":"Compose-View","props":{"slotKey":"default","placeholder":"拖入checkbox","tenonCompProps":"{{this.tenonCompProps}}","useTeleport":"{{true}}","isSlot":true},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('checkboxGroupConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('checkboxGroupConfig', 'model-value', '$comp.states.selected');\n    }\n    onMounted(function () {\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                var bindingExpression = tenonComp.propsBinding.getBinding('checkboxGroupConfig', 'model-value');\n                var value = args[0];\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n            }\n        });\n    });\n    return {\n        selected: [],\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"CheckBoxGroup","icon":"file","description":["CheckBoxGroup组件"],"dependencies":[],"platform":["web"],"events":{"onChange":"值改变时","update:modelValue":"值更新时"},"schemas":[{"type":"object","title":"CheckBoxGroup属性","fieldName":"checkboxGroupConfig","properties":{"model-value":{"type":"string","title":"checkboxGroup选中的值(数组)","internal":false,"default":[]},"direction":{"type":"select","title":"复选框的排列方向","options":{"vertical":"垂直","horizontal":"水平"},"default":"horizontal"},"disabled":{"type":"boolean","title":"是否禁用","default":false}}}],"tenonProps":{"containerStyle":{}}}},"DatePicker":{"view":{"el":"ArcoDatePicker","props":{"t-bind":"datePickerConfig","style":"customElementStyle"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('datePickerConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('datePickerConfig', 'model-value', '$comp.states.dateValue');\n    }\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                var value = args[0], date = args[1], dateString = args[2];\n                tenonComp.states.dateValue = date;\n                var bindingExpression = tenonComp.propsBinding.getBinding('datePickerConfig', 'model-value');\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n            }\n            if (eventName === \"onClear\") {\n                var value = args[0], date = args[1], dateString = args[2];\n                var bindingExpression = tenonComp.propsBinding.getBinding('datePickerConfig', 'model-value');\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(date)));\n            }\n        });\n    });\n    return {\n        author: 'Doctorwu',\n        dateValue: Date.now(),\n    };\n}","doc":"","config":{"name":"DatePicker","icon":"file","description":["DatePicker组件, 提供日期选择的能力"],"dependencies":[],"platform":["web"],"events":{"onChange":"选择日期时","onClear":"点击清除时"},"schemas":[{"type":"object","title":"日期选择组件属性","fieldName":"datePickerConfig","properties":{"model-value":{"type":"string","title":"绑定值"},"default-value":{"type":"string","title":"默认值"},"format":{"type":"string","title":"格式"},"show-time":{"type":"boolean","title":"是否增加时间选择","default":false},"show-now-btn":{"type":"boolean","title":"是否显示获取当前时间的按钮","default":false}}},{"type":"custom","title":"日期选择器样式","fieldName":"customElementStyle","properties":{"width":{"type":"string","title":"宽度","default":"100%"}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"Form":{"view":{"el":"ArcoForm","props":{"t-bind":"{{[this.formConfig,{ labelColProps: this.labelColProps, wrapperColProps: this.wrapperColProps}]}}","ref":"form"},"children":[{"el":"Compose-View","props":{"t-slot":"default","slotKey":"default","isSlot":true,"placeholder":"拖入表单项生成表单内容","tenonCompProps":"{{this.tenonCompProps}}","composeLayout":{}},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('formConfig', 'model')) {\n        tenonComp.propsBinding.addBinding('formConfig', 'model', '$comp.states.formModel');\n    }\n    var form;\n    onMounted(function () {\n        var _a;\n        // console.log(lifeCycle, props, ctx, tenonComp);\n        form = (_a = tenonComp.refs) === null || _a === void 0 ? void 0 : _a.form;\n    });\n    var resetFields = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return form.resetFields.apply(form, args);\n    };\n    var clearValidate = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return form.clearValidate.apply(form, args);\n    };\n    var validate = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        form.validate.apply(form, args);\n    };\n    var validateField = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return form.validateField.apply(form, args);\n    };\n    return {\n        author: 'Doctorwu',\n        resetFields: resetFields,\n        clearValidate: clearValidate,\n        validate: validate,\n        validateField: validateField,\n        formModel: {}\n    };\n}","doc":"","config":{"name":"Form","icon":"file","description":["Form组件, 提供表单相关的能力"],"dependencies":[],"platform":["web"],"events":{"onSubmit":"提交时"},"schemas":[{"type":"object","title":"表单属性","fieldName":"formConfig","properties":{"model":{"type":"string","title":"表单数据对象"},"layout":{"type":"select","title":"表单的布局方式","options":{"horizontal":"水平","vertical":"垂直","inline":"多列"},"default":"horizontal"},"size":{"type":"select","title":"表单尺寸","options":{"mini":"mini","small":"small","medium":"medium","large":"large"},"default":"medium"},"label-align":{"type":"select","title":"标签的对齐方向","options":{"left":"左","right":"右"},"default":"right"},"disabled":{"type":"boolean","title":"是否禁用表单","default":false},"auto-label-width":{"type":"boolean","title":"是否开启自动标签宽度","default":true}}},{"type":"object","title":"标签元素布局选项","fieldName":"labelColProps","properties":{"span":{"type":"number","title":"span","default":5},"offset":{"type":"number","title":"offset","default":0}}},{"type":"object","title":"表单控件布局选项","fieldName":"wrapperColProps","properties":{"span":{"type":"number","title":"span","default":19},"offset":{"type":"number","title":"offset","default":0}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"FormItem":{"view":{"el":"ArcoFormItem","props":{"t-bind":"{{[this.formItemConfig,{ labelColProps: this.labelColProps, wrapperColProps: this.wrapperColProps}]}}","ref":"formItem"},"children":[{"el":"Compose-View","props":{"t-slot":"default","slotKey":"default","isSlot":true,"placeholder":"拖入表单控件生成表单内容","tenonCompProps":"{{this.tenonCompProps}}","composeLayout":{}},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    var add = function () {\n        tenonComp.states.count.value++;\n    };\n    var subtract = function () {\n        tenonComp.states.count.value--;\n    };\n    return {\n        count: {\n            value: 0,\n        },\n        author: 'Doctorwu',\n        add: add,\n        subtract: subtract,\n    };\n}","doc":"","config":{"name":"FormItem","icon":"file","description":["FormItem组件, 提供表单相关的能力"],"dependencies":[],"platform":["web"],"events":{"onSubmit":"提交时"},"schemas":[{"type":"object","title":"表单项属性","fieldName":"formItemConfig","properties":{"field":{"type":"string","title":"表单元素在数据对象中的path"},"label":{"type":"string","title":"标签的文本","default":"标签"},"show-colon":{"type":"boolean","title":"是否显示冒号","default":false},"no-style":{"type":"boolean","title":"是否去除样式","default":false},"disabled":{"type":"boolean","title":"是否禁用","default":false},"help":{"type":"string","title":"帮助文案"},"extra":{"type":"string","title":"额外显示的文案"},"required":{"type":"boolean","title":"是否必须填写"},"rules":{"type":"select","title":"表单项校验规则","reverse":true,"multiple":true,"options":{"必填":{"required":true,"message":"该项必填","trigger":"change"}}},"validate-trigger":{"type":"select","title":"触发校验的事件","options":{"change":"change","input":"input","focus":"focus","blur":"blur"},"default":"change"},"hide-label":{"type":"boolean","title":"是否隐藏标签","default":false},"hide-asterisk":{"type":"boolean","title":"是否隐藏星号","default":false},"feedback":{"type":"boolean","title":"是否显示表单控件的反馈图标","default":false}}},{"type":"object","title":"标签元素布局选项","fieldName":"labelColProps","properties":{"span":{"type":"number","title":"span","default":5},"offset":{"type":"number","title":"offset","default":0}}},{"type":"object","title":"表单控件布局选项","fieldName":"wrapperColProps","properties":{"span":{"type":"number","title":"span","default":19},"offset":{"type":"number","title":"offset","default":0}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"Input":{"view":{"el":"ArcoInput","props":{"t-bind":"inputConfig"},"children":[{"props":{},"children":[{"el":"[[Comment]]","props":{}}],"type":"Comment"},{"el":"Compose-View","props":{"t-if":"this.slotConfig.showSuffix","t-slot":"suffix","isSlot":true,"slotKey":"suffix","placeholder":"拖入组件生成后缀元素","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},{"el":"Compose-View","props":{"t-if":"this.slotConfig.showPrefix","t-slot":"prefix","isSlot":true,"slotKey":"prefix","placeholder":"拖入组件生成前缀元素","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('inputConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('inputConfig', 'model-value', '$comp.states.inputValue');\n    }\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onInput\") {\n                tenonComp.states.inputValue = args[0];\n                var bindingExpression = tenonComp.propsBinding.getBinding('inputConfig', 'model-value');\n                var value = args[0];\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n            }\n            if (eventName === \"onClear\") {\n                var bindingExpression = tenonComp.propsBinding.getBinding('inputConfig', 'model-value');\n                tenonComp.exec(\"\".concat(bindingExpression, \" = ''\"));\n            }\n        });\n    });\n    return {\n        author: 'Doctorwu',\n        inputValue: '',\n    };\n}","doc":"","config":{"name":"Input","icon":"file","description":["Input组件"],"dependencies":[],"platform":["web"],"events":{"onInput":"输入时","onChange":"输入框失焦或按下回车时","onPressEnter":"按下回车时","onClear":"用户点击清除按钮时","onFocus":"获取焦点时","onBlur":"失去焦点时"},"schemas":[{"type":"object","title":"输入框配置","fieldName":"inputConfig","properties":{"model-value":{"type":"string","title":"输入框绑定值"},"type":{"type":"select","title":"type","options":{"input":"input","password":"password"},"default":"input"},"size":{"type":"select","title":"输入框大小","options":{"mini":"mini","small":"small","medium":"medium","large":"large"},"default":"medium"},"placeholder":{"type":"string","title":"提示文字"},"max-length":{"type":"number","title":"最大长度"},"allow-clear":{"type":"boolean","title":"是否允许清空输入框","default":false},"disabled":{"type":"boolean","title":"是否禁用","default":false},"readonly":{"type":"boolean","title":"是否为只读","default":false},"error":{"type":"boolean","title":"是否为错误状态","default":false},"show-word-limit":{"type":"boolean","title":"是否显示字数统计","default":false}}},{"type":"object","title":"输入框插槽配置","fieldName":"slotConfig","properties":{"showSuffix":{"type":"boolean","title":"是否显示后缀元素插槽","default":false},"showPrefix":{"type":"boolean","title":"是否显示前缀元素插槽","default":false}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"InputNumber":{"view":{"el":"ArcoInputNumber","props":{"t-bind":"inputNumberConfig"},"children":[{"props":{},"children":[{"el":"[[Comment]]","props":{}}],"type":"Comment"},{"el":"Compose-View","props":{"t-if":"this.slotConfig.showSuffix","t-slot":"suffix","isSlot":true,"slotKey":"suffix","placeholder":"拖入组件生成后缀元素","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},{"el":"Compose-View","props":{"t-if":"this.slotConfig.showPrefix","t-slot":"prefix","isSlot":true,"slotKey":"prefix","placeholder":"拖入组件生成前缀元素","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('inputNumberConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('inputNumberConfig', 'model-value', '$comp.states.numberValue');\n    }\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                tenonComp.states.numberValue = args[0];\n                var bindingExpression = tenonComp.propsBinding.getBinding('inputNumberConfig', 'model-value');\n                var value = args[0];\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n            }\n            if (eventName === \"onClear\") {\n                var bindingExpression = tenonComp.propsBinding.getBinding('inputNumberConfig', 'model-value');\n                tenonComp.exec(\"\".concat(bindingExpression, \" = ''\"));\n            }\n        });\n    });\n    return {\n        author: 'Doctorwu',\n        numberValue: 0,\n    };\n}","doc":"","config":{"name":"InputNumber","icon":"file","description":["InputNumber组件"],"dependencies":[],"platform":["web"],"events":{"onChange":"值发生改变时","onClear":"用户点击清除按钮时","onFocus":"获取焦点时","onBlur":"失去焦点时"},"schemas":[{"type":"object","title":"数字输入框配置","fieldName":"inputNumberConfig","properties":{"model-value":{"type":"string","title":"输入框绑定值"},"mode":{"type":"select","title":"模式","options":{"embed":"embed","button":"button"},"default":"embed"},"precision":{"type":"number","title":"数字精度"},"step":{"type":"number","title":"数字变化步长","default":1},"max":{"type":"number","title":"最大值"},"min":{"type":"number","title":"最小值"},"size":{"type":"select","title":"输入框大小","options":{"mini":"mini","small":"small","medium":"medium","large":"large"},"default":"medium"},"placeholder":{"type":"string","title":"提示文字"},"hide-button":{"type":"boolean","title":"是否隐藏按钮","default":false},"allow-clear":{"type":"boolean","title":"是否允许清空输入框","default":false},"disabled":{"type":"boolean","title":"是否禁用","default":false},"error":{"type":"boolean","title":"是否为错误状态","default":false}}},{"type":"object","title":"输入框插槽配置","fieldName":"slotConfig","properties":{"showSuffix":{"type":"boolean","title":"是否显示后缀元素插槽","default":false},"showPrefix":{"type":"boolean","title":"是否显示前缀元素插槽","default":false}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"InputTag":{"view":{"el":"ArcoInputTag","props":{"t-bind":"inputTagConfig","style":"customElementStyle","ref":"inputTag"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('inputTagConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('inputTagConfig', 'model-value', '$comp.states.inputValue');\n    }\n    ;\n    onMounted(function () {\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                tenonComp.states.inputValue = args[0];\n                var bindingExpression = tenonComp.propsBinding.getBinding('inputTagConfig', 'model-value');\n                var value = args[0];\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n            }\n            if (eventName === \"onRemove\") {\n                tenonComp.states.inputValue = args[0];\n                var bindingExpression = tenonComp.propsBinding.getBinding('inputTagConfig', 'model-value');\n                var value = args[0];\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(bindingExpression, \".filter(i => i !== '\").concat(value, \"')\"));\n            }\n            if (eventName === \"onClear\") {\n                var bindingExpression = tenonComp.propsBinding.getBinding('inputTagConfig', 'model-value');\n                tenonComp.exec(\"\".concat(bindingExpression, \" = []\"));\n            }\n        });\n    });\n    return {\n        inputValue: [],\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"InputTag","icon":"file","description":["InputTag组件"],"dependencies":[],"platform":["web"],"events":{"onInputValueChange":"输入值改变时","onChange":"值发生改变时","onPressEnter":"按下回车时","onRemove":"删除标签时","onClear":"用户点击清除按钮时","onFocus":"获取焦点时","onBlur":"失去焦点时"},"schemas":[{"type":"object","title":"输入标签属性","fieldName":"inputTagConfig","properties":{"model-value":{"type":"string","title":"输入标签绑定值"},"size":{"type":"select","title":"输入标签大小","options":{"mini":"mini","small":"small","medium":"medium","large":"large"},"default":"medium"},"placeholder":{"type":"string","title":"提示文字"},"max-tag-count":{"type":"number","title":"最多展示的标签个数, 0表示不限制","default":0},"allow-clear":{"type":"boolean","title":"是否允许清空","default":false},"unique-value":{"type":"boolean","title":"是否仅创建唯一值","default":true},"disabled":{"type":"boolean","title":"是否禁用","default":false},"readonly":{"type":"boolean","title":"是否为只读","default":false},"error":{"type":"boolean","title":"是否为错误状态","default":false}}},{"type":"custom","title":"标签选择器样式","fieldName":"customElementStyle","properties":{"width":{"type":"string","title":"宽度","default":"100%"}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"Radio":{"view":{"el":"ArcoRadio","props":{"t-bind":"radioConfig"},"children":[{"el":"Text","props":{"textValue":{"value":"{{this.radioConfig.content}}"}},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('radioConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('radioConfig', 'model-value', '$comp.states.selectValue');\n    }\n    onMounted(function () {\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                tenonComp.states.selectValue = args[0];\n                if (tenonComp.tenonCompProps.scopeSlotArgs) {\n                    tenonComp.tenonCompProps.scopeSlotArgs.checked = args[0];\n                }\n            }\n        });\n    });\n    return {\n        selectValue: '',\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Radio","icon":"file","description":["Radio组件"],"dependencies":[],"platform":["web"],"events":{"onChange":"值改变时"},"schemas":[{"type":"object","title":"单选框属性","fieldName":"radioConfig","properties":{"model-value":{"type":"string","title":"单选框绑定值"},"content":{"type":"string","title":"单选框label","default":"单选框"},"type":{"type":"select","title":"单选框类型","options":{"radio":"radio","button":"button"},"default":"radio"},"value":{"type":"string","title":"选项的值","default":"value"},"disabled":{"type":"boolean","title":"按钮是否禁用","default":false}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"RadioGroup":{"view":{"el":"ArcoRadioGroup","props":{"t-bind":"radioGroupConfig","style":"customElementStyle"},"children":[{"el":"Compose-View","props":{"slotKey":"default","placeholder":"拖入radio","tenonCompProps":"{{this.tenonCompProps}}","useTeleport":"{{true}}","isSlot":true},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('radioGroupConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('radioGroupConfig', 'model-value', '$comp.states.selectValue');\n    }\n    onMounted(function () {\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                var bindingExpression = tenonComp.propsBinding.getBinding('radioGroupConfig', 'model-value');\n                var value = args[0];\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n            }\n        });\n    });\n    return {\n        selectValue: '',\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"RadioGroup","icon":"file","description":["RadioGroup组件"],"dependencies":[],"platform":["web"],"events":{"onChange":"值改变时"},"schemas":[{"type":"object","title":"单选框组属性","fieldName":"radioGroupConfig","properties":{"model-value":{"type":"string","title":"单选框组绑定值"},"type":{"type":"select","title":"单选框组类型","options":{"radio":"radio","button":"button"},"default":"radio"},"size":{"type":"select","title":"单选框组大小","options":{"mini":"mini","small":"small","medium":"medium","large":"large"},"default":"medium"},"direction":{"type":"select","title":"单选框组方向","options":{"horizontal":"horizontal","vertical":"vertical"},"default":"horizontal"},"disabled":{"type":"boolean","title":"单选框组是否禁用","default":false}}},{"type":"custom","title":"单选框组样式","fieldName":"customElementStyle","properties":{"width":{"type":"string","title":"宽度","default":"100%"}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"Rate":{"view":{"el":"ArcoRate","props":{"t-bind":"rateConfig"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('rateConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('rateConfig', 'model-value', '$comp.states.rateValue');\n    }\n    onMounted(function () {\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                var bindingExpression = tenonComp.propsBinding.getBinding('rateConfig', 'model-value');\n                var value = args[0];\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n            }\n        });\n    });\n    return {\n        rateValue: 3,\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Rate","icon":"file","description":["Rate组件"],"dependencies":[],"platform":["web"],"events":{"onChange":"值改变时"},"schemas":[{"type":"object","title":"评分属性","fieldName":"rateConfig","properties":{"model-value":{"type":"string","title":"评分绑定值"},"count":{"type":"number","title":"评分的总数","default":5},"default-value":{"type":"number","title":"评分的默认值","default":3},"allow-half":{"type":"boolean","title":"是否允许半选","default":false},"allow-clear":{"type":"boolean","title":"是否允许清除","default":false},"grading":{"type":"boolean","title":"是否开启笑脸分级","default":false},"readonly":{"type":"boolean","title":"是否为只读状态","default":false},"disabled":{"type":"boolean","title":"按钮是否禁用","default":false}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"Select":{"view":{"el":"ArcoSelect","props":{"t-bind":"selectConfig"},"children":[{"el":"SelectOption","props":{"t-for":"this.selectValue.value","selectOptionConfig":{"label":"{{String(this.item.label || this.item)}}","value":"{{String(this.item.value || this.item)}}"}},"type":"Element"},{"props":{},"children":[{"el":"[[Comment]]","props":{}}],"type":"Comment"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('selectConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('selectConfig', 'model-value', '$comp.states.innerSelectValue');\n    }\n    ;\n    if (!tenonComp.propsBinding.hasBinding('selectValue', 'value')) {\n        tenonComp.propsBinding.addBinding('selectValue', 'value', '[1, 2, 3]');\n    }\n    ;\n    onMounted(function () {\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                tenonComp.states.inputValue = args[0];\n                var bindingExpression = tenonComp.propsBinding.getBinding('selectConfig', 'model-value');\n                var value = args[0];\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n            }\n            if (eventName === \"onRemove\") {\n                tenonComp.states.inputValue = args[0];\n                var bindingExpression = tenonComp.propsBinding.getBinding('selectConfig', 'model-value');\n                var value = args[0];\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(bindingExpression, \".filter(i => i !== '\").concat(value, \"')\"));\n            }\n            if (eventName === \"onClear\") {\n                var bindingExpression = tenonComp.propsBinding.getBinding('selectConfig', 'model-value');\n                tenonComp.exec(\"\".concat(bindingExpression, \" = []\"));\n            }\n        });\n    });\n    return {\n        innerSelectValue: \"\",\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Select","icon":"file","description":["Select组件"],"dependencies":[],"platform":["web"],"events":{"onChange":"值发生改变时","onInputValueChange":"输入框的值发生改变时","onClear":"当用户点击清空按钮时","onRemove":"当点击多选标签的删除按钮时"},"schemas":[{"type":"object","title":"选择框的值","fieldName":"selectValue","properties":{"value":{"type":"object","title":"值","default":[1,2,3]}}},{"type":"object","title":"选择框属性","fieldName":"selectConfig","properties":{"model-value":{"type":"string","title":"绑定值"},"multiple":{"type":"boolean","title":"是否开启多选","default":false},"limit":{"type":"number","title":"多选限制的个数。0表示不限制","default":0},"max-tag-count":{"type":"number","title":"多选模式下,最多显示的标签数量。0表示不限制","default":0},"size":{"type":"select","title":"选择框大小","options":{"mini":"mini","small":"small","medium":"medium","large":"large"},"default":"medium"},"placeholder":{"type":"string","title":"提示文字","default":"请选择"},"loading":{"type":"boolean","title":"是否为加载中状态","default":false},"disabled":{"type":"boolean","title":"是否禁用","default":false},"error":{"type":"boolean","title":"是否为错误状态","default":false},"allow-clear":{"type":"boolean","title":"是否允许清空","default":false},"allow-create":{"type":"boolean","title":"是否允许创建没有的选项","default":false},"allow-search":{"type":"boolean","title":"是否允许搜索","default":false},"bordered":{"type":"boolean","title":"是否显示输入框的边框","default":true},"value-key":{"type":"string","title":"用于确定选项键值的属性名","default":"value"}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"SelectOption":{"view":{"el":"ArcoOption","props":{"t-bind":"selectOptionConfig"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"SelectOption","icon":"file","description":["SelectOption组件"],"dependencies":[],"platform":["web"],"events":{},"schemas":[{"type":"object","title":"选择项属性","fieldName":"selectOptionConfig","properties":{"value":{"type":"string","title":"选项值","default":"option"},"label":{"type":"string","title":"选项标签","default":"label"},"disabled":{"type":"boolean","title":"是否禁用","default":false}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"Switch":{"view":{"el":"ArcoSwitch","props":{"t-bind":"switchConfig"},"children":[{"el":"Compose-View","props":{"t-if":"this.switchSlots.useCheckedIcon","t-slot":"checked-icon","slotKey":"checked-icon","isSlot":true,"placeholder":"拖入组件生成选中时按钮","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},{"el":"Compose-View","props":{"t-if":"this.switchSlots.useUnCheckedIcon","t-slot":"unchecked-icon","slotKey":"unchecked-icon","isSlot":true,"placeholder":"拖入组件生成未选中时按钮","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},{"el":"Compose-View","props":{"t-if":"this.switchSlots.useChecked","t-slot":"checked","slotKey":"checked","isSlot":true,"placeholder":"拖入组件生成选中时文字","composeLayout":{"display":"inline-block"},"tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},{"el":"Compose-View","props":{"t-if":"this.switchSlots.useUnChecked","t-slot":"unchecked","slotKey":"unchecked","isSlot":true,"placeholder":"拖入组件生成未选中时文字","composeLayout":{"display":"inline-block"},"tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('switchConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('switchConfig', 'model-value', '$comp.states.switchValue');\n    }\n    ;\n    onMounted(function () {\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                tenonComp.states.inputValue = args[0];\n                var bindingExpression = tenonComp.propsBinding.getBinding('switchConfig', 'model-value');\n                var value = args[0];\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n            }\n        });\n    });\n    return {\n        switchValue: false,\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Switch","icon":"file","description":["Switch组件"],"dependencies":[],"platform":["web"],"events":{"onChange":"值改变时"},"schemas":[{"type":"object","title":"开关属性","fieldName":"switchConfig","properties":{"model-value":{"type":"string","title":"绑定值"},"default-checked":{"type":"string","title":"默认选中状态","boolean":false},"disabled":{"type":"boolean","title":"是否禁用","default":false},"loading":{"type":"boolean","title":"是否为加载中状态","default":false},"type":{"type":"select","title":"开关类型","options":{"circle":"circle","round":"round","line":"line"},"default":"circle"},"size":{"type":"select","title":"开关大小","options":{"small":"small","medium":"medium"},"default":"medium"},"checked-value":{"type":"string","title":"选中时的值","default":true},"unchecked-value":{"type":"string","title":"未选中时的值","default":false},"checked-color":{"type":"color","title":"选中时的颜色"},"unchecked-color":{"type":"color","title":"未选中时的颜色"}}},{"type":"object","title":"开关插槽","fieldName":"switchSlots","properties":{"useCheckedIcon":{"type":"boolean","title":"选中时的图标","default":false},"useUnCheckedIcon":{"type":"boolean","title":"未选中时的图标","default":false},"useChecked":{"type":"boolean","title":"选中时的文案","default":false},"useUnChecked":{"type":"boolean","title":"未选中时的文案","default":false}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"TextArea":{"view":{"el":"ArcoTextarea","props":{"t-bind":"textareaConfig"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('textareaConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('textareaConfig', 'model-value', '$comp.states.textareaValue');\n    }\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onInput\") {\n                tenonComp.states.textareaValue = args[0];\n                var bindingExpression = tenonComp.propsBinding.getBinding('textareaConfig', 'model-value');\n                var value = args[0];\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n            }\n            if (eventName === \"onClear\") {\n                var bindingExpression = tenonComp.propsBinding.getBinding('textareaConfig', 'model-value');\n                tenonComp.exec(\"\".concat(bindingExpression, \" = ''\"));\n            }\n        });\n    });\n    return {\n        textareaValue: '',\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"TextArea","icon":"file","description":["TextArea组件"],"dependencies":[],"platform":["web"],"events":{"onInput":"输入时","onChange":"仅在文本框失焦时","onClear":"用户点击清除按钮时","onFocus":"获取焦点时","onBlur":"失去焦点时"},"schemas":[{"type":"object","title":"文本域配置","fieldName":"textareaConfig","properties":{"model-value":{"type":"string","title":"文本域绑定值"},"placeholder":{"type":"string","title":"提示文字"},"auto-size":{"type":"boolean","title":"是否让文本框自适应内容高度","default":false},"max-length":{"type":"number","title":"最大长度"},"allow-clear":{"type":"boolean","title":"是否允许清空文本域","default":false},"disabled":{"type":"boolean","title":"是否禁用","default":false},"readonly":{"type":"boolean","title":"是否为只读","default":false},"error":{"type":"boolean","title":"是否为错误状态","default":false},"show-word-limit":{"type":"boolean","title":"是否显示字数统计","default":false}}},{"type":"object","title":"文本域插槽配置","fieldName":"slotConfig","properties":{"showSuffix":{"type":"boolean","title":"是否显示后缀元素插槽","default":false},"showPrefix":{"type":"boolean","title":"是否显示前缀元素插槽","default":false}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}},"TimePicker":{"view":{"el":"ArcoTimePicker","props":{"t-bind":"timePickerConfig","style":"customElementStyle"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('timePickerConfig', 'model-value')) {\n        tenonComp.propsBinding.addBinding('timePickerConfig', 'model-value', '$comp.states.timeValue');\n    }\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                var value = args[0], date = args[1], dateString = args[2];\n                tenonComp.states.timeValue = date;\n                var bindingExpression = tenonComp.propsBinding.getBinding('timePickerConfig', 'model-value');\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n            }\n            if (eventName === \"onClear\") {\n                var value = args[0], date = args[1], dateString = args[2];\n                var bindingExpression = tenonComp.propsBinding.getBinding('timePickerConfig', 'model-value');\n                tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(date)));\n            }\n        });\n    });\n    return {\n        timeValue: '',\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"TimePicker","icon":"file","description":["TimePicker组件, 提供时间选择的能力"],"dependencies":[],"platform":["web"],"events":{"onChange":"选择时间时","onClear":"点击清除时"},"schemas":[{"type":"object","title":"时间选择组件属性","fieldName":"timePickerConfig","properties":{"model-value":{"type":"string","title":"绑定值"},"type":{"type":"select","title":"时间选择器类型","options":{"time":"time","time-range":"time-range"},"default":"time"},"default-value":{"type":"string","title":"默认值"},"disabled":{"type":"boolean","title":"是否禁用","default":false},"allow-clear":{"type":"boolean","title":"是否允许清空","default":true},"readonly":{"type":"boolean","title":"是否为只读","default":false},"error":{"type":"boolean","title":"是否为错误状态","default":false},"format":{"type":"string","title":"格式","default":"HH:mm:ss"},"placeholder":{"type":"string","title":"提示文案","default":"请选择时间"}}},{"type":"custom","title":"时间选择器样式","fieldName":"customElementStyle","properties":{"width":{"type":"string","title":"宽度","default":"100%"}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box"}}}}},"LayoutComps":{"Card":{"view":{"el":"ArcoCard","props":{"t-bind":"cardProps"},"children":[{"el":"Compose-View","props":{"slotKey":"title","placeholder":"拖入组件生成卡片头部","isSlot":true,"tenonCompProps":"{{this.tenonCompProps}}","t-slot":"title","t-if":"!this.cardProps.title"},"type":"Element"},{"el":"Compose-View","props":{"slotKey":"default","tenonCompProps":"{{this.tenonCompProps}}","placeholder":"拖入组件生成卡片内容","isSlot":true},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onBeforeMount(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Card","icon":"file","dependencies":[["Card","@arco-design","@arco-design/web-vue"]],"description":["Card是一个展示型组件"],"platform":["web"],"schemas":[{"type":"object","title":"卡片属性","fieldName":"cardProps","properties":{"bordered":{"type":"boolean","title":"是否有边框","default":true},"loading":{"type":"boolean","title":"是否为加载中","default":false},"hoverable":{"type":"boolean","title":"是否可悬浮","default":false},"showHeader":{"type":"boolean","title":"展示卡片头部","default":true},"size":{"type":"select","title":"卡片尺寸","options":{"medium":"中","small":"小"},"default":"medium"},"title":{"type":"string","title":"标题文字(优先)","default":""}}}]}},"Col":{"view":{"el":"Compose-View","props":{"slotKey":"default","isSlot":true,"composeLayout":"{{this.composeLayout}}","composeBackground":"{{this.composeBackground}}","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount, watch = lifeCycle.watch;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    var watchCancel;\n    onBeforeMount(function () {\n        if (!tenonComp.propsBinding.hasBinding('composeLayout', 'padding')) {\n            tenonComp.propsBinding.addBinding('composeLayout', 'padding', \"_editMode.value ? '3px' : '0'\");\n        }\n        watchCancel = watch(function () {\n            if (props.compProps.span > 12)\n                return props.compProps.span = 12;\n            if (props.compProps.span < 0)\n                return props.compProps.span = 0;\n            if (props.compProps.offset > 12)\n                return props.compProps.offset = 12;\n            if (props.compProps.offset < 0)\n                return props.compProps.offset = 0;\n            props.containerStyle.width = \"\".concat(props.compProps.span / 12 * 100, \"%\");\n            props.containerStyle.marginLeft = \"\".concat(props.compProps.offset / 12 * 100, \"%\");\n        });\n    });\n    onBeforeUnmount(function () {\n        watchCancel();\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Col","icon":"file","description":["Col组件"],"dependencies":[],"platform":["web"],"schemas":[{"type":"object","title":"组件属性","fieldName":"compProps","properties":{"span":{"type":"number","title":"Col列数(最大12)","default":6},"offset":{"type":"number","title":"Col位移列数(最大12)","default":0}}},{"type":"internal","key":"containerLayout","title":"Col子容器样式","fieldName":"composeLayout"},{"type":"internal","key":"containerBackground","title":"Col子容器背景","fieldName":"composeBackground"}],"tenonProps":{"containerStyle":{"box-sizing":"border-box","padding":"0px","height":"100%"}}}},"Row":{"view":{"el":"Compose-View","props":{"slotKey":"default","isSlot":true,"composeLayout":"{{this.composeLayout}}","composeBackground":"{{this.composeBackground}}","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onBeforeMount(function () {\n        props.composeLayout.display = 'flex';\n        props.composeLayout.flexWrap = 'wrap';\n        if (!tenonComp.propsBinding.hasBinding('composeLayout', 'padding')) {\n            tenonComp.propsBinding.addBinding('composeLayout', 'padding', \"_editMode.value ? '3px' : '0'\");\n        }\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Row","icon":"file","description":["Row组件"],"dependencies":[],"platform":["web"],"schemas":[{"type":"internal","key":"containerLayout","title":"Row子容器样式","fieldName":"composeLayout"},{"type":"internal","key":"containerBackground","title":"Row子容器背景","fieldName":"composeBackground"}],"tenonProps":{"containerStyle":{}}}},"Space":{"view":{"el":"ArcoSpace","props":{"t-bind":"spaceConfig"},"children":[{"el":"Compose-View","props":{"t-for":"Array.from({length: this.spaceCount.count || 0})","t-slot":"default","slotKey":"{{`space-item_${this.index}`}}","isSlot":true,"composeLayout":{"minWidth":"100px","boxSizing":"border-box"},"tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onBeforeMount(function () {\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Space","icon":"file","description":["Space是一个<布局组件>，提供基础的布局间隔能力"],"dependencies":[],"platform":["web"],"schemas":[{"type":"object","title":"Space个数","fieldName":"spaceCount","properties":{"count":{"type":"number","title":"个数","default":3}}},{"type":"object","title":"Space属性","fieldName":"spaceConfig","properties":{"align":{"type":"select","title":"对齐方式","options":{"start":"start","end":"end","center":"center","baseline":"baseline"}},"direction":{"type":"select","title":"间距方向","options":{"vertical":"vertical","horizontal":"horizontal"},"default":"horizontal"},"size":{"type":"select","title":"间距大小","options":{"mini":"mini","small":"small","medium":"medium","large":"large"},"default":"small"},"wrap":{"type":"boolean","title":"环绕类型","default":false},"fill":{"type":"boolean","title":"充满整行","default":false}}}],"tenonProps":{}}}},"Logic":{"For":{"view":{"el":"TenonFor","props":{"t-bind":"ForConfig","composeLayout":"{{this.composeLayout}}","composeBackground":"{{this.composeBackground}}","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        if (!tenonComp.propsBinding.hasBinding('ForConfig', 'loop')) {\n            tenonComp.propsBinding.addBinding('ForConfig', 'loop', \"[1, 2 , 3]\");\n        }\n        if (!tenonComp.propsBinding.hasBinding('containerStyle', 'padding')) {\n            tenonComp.propsBinding.addBinding('containerStyle', 'padding', \"_editMode.value ? '3px' : '0'\");\n        }\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"For","icon":"code-block","description":["For 是一个<逻辑组件>, For可以提供循环相关的能力"],"platform":["web"],"schemas":[{"type":"object","title":"循环逻辑配置","fieldName":"ForConfig","properties":{"loop":{"type":"loop","title":"循环","default":[]}}},{"type":"internal","key":"containerLayout","title":"For子容器样式","fieldName":"composeLayout"},{"type":"internal","key":"containerBackground","title":"For子容器背景","fieldName":"composeBackground"}],"tenonProps":{}}},"If":{"view":{"el":"TenonTemplate","props":{"t-if":"this.IfConfig.render || this.getEditMode().value"},"children":[{"el":"Compose-View","props":{"t-if":"this.IfConfig.render","slotKey":"default","placeholder":"拖入组件生成组件内容","isSlot":true,"composeLayout":"{{this.composeLayout}}","composeBackground":"{{this.composeBackground}}","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},{"el":"TenonText","props":{"t-if":"!this.IfConfig.render && this.getEditMode().value","textStyle":{"color":"red","fontSize":"12px"}},"children":["    元素将不会渲染  "],"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp, editMode) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        if (!tenonComp.propsBinding.hasBinding('containerStyle', 'padding')) {\n            tenonComp.propsBinding.addBinding('containerStyle', 'padding', \"(_editMode.value && $comp.props.IfConfig.render) ? '3px' : '0'\");\n        }\n    });\n    return {\n        author: 'Doctorwu',\n        getEditMode: function () {\n            return editMode;\n        },\n    };\n}","doc":"","config":{"name":"If","icon":"code-block","description":["If 是一个<逻辑组件>, If可以提供是否渲染子元素的能力"],"platform":["web"],"schemas":[{"type":"object","title":"逻辑配置","fieldName":"IfConfig","properties":{"render":{"type":"boolean","title":"是否渲染子元素","default":true}}},{"type":"internal","key":"containerLayout","title":"If子容器样式","fieldName":"composeLayout"},{"type":"internal","key":"containerBackground","title":"If子容器背景","fieldName":"composeBackground"}],"tenonProps":{"containerStyle":{}}}}},"Navigate":{"Menu":{"view":{"el":"ArcoMenu","props":{"t-bind":"menuConfig","style":"menuStyle"},"children":[{"el":"Compose-View","props":{"slotKey":"default","placeholder":"拖入组件生成菜单内容","isSlot":true,"tenonCompProps":"{{this.tenonCompProps}}","composeLayout":{"boxSizing":"border-box","width":"auto","height":"100%"}},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Menu","icon":"menu","description":["Menu 是一个<导航组件>, Menu可以提供菜单相关的能力"],"platform":["web"],"schemas":[{"type":"object","title":"菜单配置","fieldName":"menuConfig","properties":{"theme":{"type":"select","title":"主题","options":{"light":"亮色","dark":"暗色"},"default":"light"},"mode":{"type":"select","title":"模式","options":{"vertical":"垂直","horizontal":"水平","pop":"弹出","popButton":"底部弹出"},"default":"vertical"},"level-indent":{"type":"number","title":"层级缩进量","default":4},"auto-open":{"type":"boolean","title":"默认展开所有多级菜单","default":false},"default-collapsed":{"type":"boolean","title":"默认是否折叠菜单","default":false},"collapsed-width":{"type":"number","title":"折叠菜单宽度","default":120},"accordion":{"type":"boolean","title":"是否开启手风琴效果","default":false},"show-collapse-button":{"type":"boolean","title":"是否内置折叠按钮","default":false}}},{"type":"object","title":"菜单样式","fieldName":"menuStyle","properties":{"width":{"type":"string","title":"菜单宽度","default":"320px"},"height":{"type":"string","title":"菜单高度","default":"100%"}}}],"tenonProps":{"containerStyle":{"box-sizing":"border-box","height":"100%"}}}},"MenuItem":{"view":{"el":"ArcoMenuItem","props":{"t-bind":"menuItemConfig","key":"{{this.tenonComp.id}}"},"children":[{"el":"Compose-View","props":{"slotKey":"icon","placeholder":"图标","isSlot":true,"tenonCompProps":"{{this.tenonCompProps}}","composeLayout":{"boxSizing":"border-box","display":"inline-block","width":"auto","minWidth":"20px"}},"type":"Element"},"  {{this.menuItemConfig.text}}"],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"MenuItem","icon":"list","description":["MenuItem 是一个<导航组件>, MenuItem可以提供菜单相关的能力"],"platform":["web"],"schemas":[{"type":"object","title":"菜单项配置","fieldName":"menuItemConfig","properties":{"text":{"type":"input","title":"菜单项文字","default":"菜单项"},"disabled":{"type":"boolean","title":"是否禁用","default":false}}}]}},"Step":{"view":{"el":"ArcoStep","props":{"t-bind":"stepConfig"},"children":[{"el":"Compose-View","props":{"slotKey":"default","placeholder":"拖入步骤项生成步骤内容","isSlot":"{{true}}","tenonCompProps":"{{this.tenonCompProps}}","useTeleport":"{{true}}"},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount, watch = lifeCycle.watch;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                var value = args[0];\n                tenonComp.props.stepConfig.current = value;\n            }\n        });\n        // watch(tenonComp.slots[\"default\"].children, () => {\n        //   debugger;\n        //   tenonComp.ctx.$forceUpdate();\n        // });\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Step","icon":"menu","description":["Step 是一个<导航组件>, Step可以提供步骤条相关的能力"],"platform":["web"],"events":{"onChange":"步骤数发生改变时"},"schemas":[{"type":"object","title":"步骤条配置","fieldName":"stepConfig","properties":{"type":{"type":"select","title":"步骤条的类型","options":{"default":"default","dot":"dot","navigation":"navigation","arrow":"arrow"},"default":"default"},"direction":{"type":"select","title":"步骤条的显示方向","options":{"vertical":"垂直","horizontal":"水平"},"default":"horizontal"},"label-placement":{"type":"select","title":"标签描述文字放置的位置","options":{"vertical":"垂直","horizontal":"水平"},"default":"horizontal"},"current":{"type":"number","title":"当前步骤数"},"default-current":{"type":"number","title":"默认的步骤数","default":1},"status":{"type":"select","title":"当前步骤的状态","options":{"wait":"wait","process":"process","finish":"finish","error":"error"},"default":"process"},"line-less":{"type":"boolean","title":"是否使用无连接线样式","default":false},"small":{"type":"boolean","title":"是否使用小型步骤条","default":false},"changeable":{"type":"boolean","title":"是否可以点击切换","default":false}}}],"tenonProps":{"containerStyle":{"overflow":"auto","padding":"3px","box-sizing":"border-box"}}}},"StepItem":{"view":{"el":"ArcoStepItem","props":{"t-bind":"stepItemConfig"},"children":[{"el":"Compose-View","props":{"t-slot":"icon","t-if":"this.stepItemConfig.useCustomIcon","slotKey":"icon","placeholder":"拖入图标","isSlot":true,"tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},{"el":"Compose-View","props":{"t-slot":"description","t-if":"this.stepItemConfig.useCustomDescription","slotKey":"description","placeholder":"拖入组件生成描述内容","isSlot":true,"tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"StepItem","icon":"list","description":["StepItem 是一个<导航组件>, StepItem可以提供步骤项相关的能力"],"platform":["web"],"schemas":[{"type":"object","title":"步骤项配置","fieldName":"stepItemConfig","properties":{"title":{"type":"input","title":"步骤的标题","default":"步骤的标题"},"description":{"type":"input","title":"步骤的描述信息","default":"步骤的描述信息"},"status":{"type":"select","title":"当前步骤的状态","options":{"wait":"wait","process":"process","finish":"finish","error":"error"}},"useCustomIcon":{"type":"boolean","title":"是否使用自定义图标","default":false},"useCustomDescription":{"type":"boolean","title":"是否使用自定义描述内容","default":false},"disabled":{"type":"boolean","title":"是否禁用","default":false}}}],"tenonProps":{"containerStyle":{"margin":"0 3px","box-sizing":"border-box"}}}},"SubMenu":{"view":{"el":"ArcoSubMenu","props":{"t-bind":"subMenuConfig","key":"{{this.tenonComp.id}}"},"children":[{"el":"Compose-View","props":{"slotKey":"default","placeholder":"拖入MenuItem生成菜单项","isSlot":true,"tenonCompProps":"{{this.tenonCompProps}}","composeLayout":{"boxSizing":"border-box","padding":"2px","minHeight":"30px"}},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onMounted(function () {\n        // console.log(lifeCycle, props, ctx, tenonComp);\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"SubMenu","icon":"menu-fold","description":["SubMenu 是一个<导航组件>, SubMenu可以提供菜单相关的能力"],"platform":["web"],"schemas":[{"type":"object","title":"子菜单配置","fieldName":"subMenuConfig","properties":{"title":{"type":"input","title":"子菜单文字","default":"子菜单"}}}]}}},"Typography":{"Typography":{"view":{"el":"ArcoTypography","props":{},"children":[{"el":"Compose-View","props":{"slotKey":"default","isSlot":true,"placeholder":"拖入组件生成排版内容","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    onBeforeMount(function () {\n    });\n    return {\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"Typography","icon":"file","description":["Typography是一个<排版组件>，提供基础的排版能力"],"dependencies":[],"platform":["web"],"events":{"onEditStart":"编辑开始时","onChange":"编辑内容变化时","onEditEnd":"编辑结束时","onCopy":"复制时"},"schemas":[{"type":"internal","key":"typoCommon","title":"基础排版配置","fieldName":"typoCommonConfig"},{"type":"internal","key":"typoEllipsis","title":"排版溢出省略配置","fieldName":"typoEllipsisConfig"}],"tenonProps":{}}},"TypographyParagraph":{"view":{"el":"ArcoTypographyParagraph","props":{"t-bind":"{{[this.typoCommonConfig, this.typoEllipsisConfig, this.typoParagraph]}}"},"children":[{"el":"Compose-View","props":{"t-if":"!this.typoParagraph.text","t-slot":"default","slotKey":"default","isSlot":true,"placeholder":"拖入组件生成排版内容","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},{"el":"TenonGhostText","props":{"t-slot":"default","t-if":"this.typoParagraph.text","value":"{{this.typoParagraph.text}}"},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('typoCommonConfig', 'edit-text')) {\n        tenonComp.propsBinding.addBinding('typoCommonConfig', 'edit-text', '$comp.props.typoParagraph.text');\n    }\n    onMounted(function () {\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                var value = args[0];\n                tenonComp.states.paragraphText = value;\n                tenonComp.props.typoParagraph.text = value;\n                if (tenonComp.propsBinding.hasBinding('typoCommonConfig', 'edit-text')) {\n                    var bindingExpression = tenonComp.propsBinding.getBinding('typoParagraph', 'text');\n                    tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n                }\n            }\n        });\n    });\n    return {\n        paragraphText: '',\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"TypographyParagraph","icon":"file","description":["TypographyParagraph是一个<排版组件>，提供基础的排版段落能力"],"dependencies":[],"platform":["web"],"events":{"onEditStart":"编辑开始时","onChange":"编辑内容变化时","onEditEnd":"编辑结束时","onCopy":"复制时"},"schemas":[{"type":"object","title":"排版段落配置","fieldName":"typoParagraph","properties":{"text":{"type":"string","title":"段落文本","default":""},"blockquote":{"type":"boolean","title":"引用段落","default":false},"spacing":{"type":"select","title":"段落间距","options":{"default":"默认","close":"近"},"default":"default"}}},{"type":"internal","key":"typoCommon","title":"基础排版配置","fieldName":"typoCommonConfig"},{"type":"internal","key":"typoEllipsis","title":"排版溢出省略配置","fieldName":"typoEllipsisConfig"}],"tenonProps":{}}},"TypographyText":{"view":{"el":"ArcoTypographyText","props":{"t-bind":"{{[this.typoCommonConfig, this.typoEllipsisConfig, this.typoText]}}"},"children":[{"el":"Compose-View","props":{"t-if":"!this.typoText.text","t-slot":"default","slotKey":"default","isSlot":true,"placeholder":"拖入组件生成排版文字","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},{"el":"TenonGhostText","props":{"t-slot":"default","t-if":"this.typoText.text","value":"{{this.typoText.text}}"},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('typoCommonConfig', 'edit-text')) {\n        tenonComp.propsBinding.addBinding('typoCommonConfig', 'edit-text', '$comp.props.typoText.text');\n    }\n    onMounted(function () {\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                var value = args[0];\n                tenonComp.states.textValue = value;\n                tenonComp.props.typoText.text = value;\n                if (tenonComp.propsBinding.hasBinding('typoCommonConfig', 'edit-text')) {\n                    var bindingExpression = tenonComp.propsBinding.getBinding('typoText', 'text');\n                    tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n                }\n            }\n        });\n    });\n    return {\n        textValue: '',\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"TypographyText","icon":"file","description":["TypographyText是一个<排版组件>，提供基础的排版文字能力"],"dependencies":[],"platform":["web"],"events":{"onEditStart":"编辑开始时","onChange":"编辑内容变化时","onEditEnd":"编辑结束时","onCopy":"复制时"},"schemas":[{"type":"object","title":"排版标题配置","fieldName":"typoText","properties":{"text":{"type":"string","title":"排版文本内容","default":""}}},{"type":"internal","key":"typoCommon","title":"基础排版配置","fieldName":"typoCommonConfig"},{"type":"internal","key":"typoEllipsis","title":"排版溢出省略配置","fieldName":"typoEllipsisConfig"}],"tenonProps":{}}},"TypographyTitle":{"view":{"el":"ArcoTypographyTitle","props":{"t-bind":"{{[this.typoCommonConfig, this.typoEllipsisConfig, this.typoTitle]}}"},"children":[{"el":"Compose-View","props":{"t-if":"!this.typoTitle.text","t-slot":"default","slotKey":"default","isSlot":true,"placeholder":"拖入组件生成排版标题","tenonCompProps":"{{this.tenonCompProps}}"},"type":"Element"},{"el":"TenonGhostText","props":{"t-slot":"default","t-if":"this.typoTitle.text","value":"{{this.typoTitle.text}}"},"type":"Element"}],"type":"Element"},"logic":"function (lifeCycle, props, ctx, tenonComp) {\n    var onMounted = lifeCycle.onMounted, onUpdated = lifeCycle.onUpdated, onBeforeUnmount = lifeCycle.onBeforeUnmount, onBeforeMount = lifeCycle.onBeforeMount;\n    if (!tenonComp.propsBinding.hasBinding('typoCommonConfig', 'edit-text')) {\n        tenonComp.propsBinding.addBinding('typoCommonConfig', 'edit-text', '$comp.props.typoTitle.text');\n    }\n    onMounted(function () {\n        tenonComp.eventCalledHook.onCalled(function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (eventName === \"onChange\") {\n                var value = args[0];\n                tenonComp.states.titleText = value;\n                tenonComp.props.typoTitle.text = value;\n                if (tenonComp.propsBinding.hasBinding('typoCommonConfig', 'edit-text')) {\n                    var bindingExpression = tenonComp.propsBinding.getBinding('typoTitle', 'text');\n                    tenonComp.exec(\"\".concat(bindingExpression, \" = \").concat(JSON.stringify(value)));\n                }\n            }\n        });\n    });\n    return {\n        titleText: '',\n        author: 'Doctorwu',\n    };\n}","doc":"","config":{"name":"TypographyTitle","icon":"file","description":["TypographyTitle是一个<排版组件>，提供基础的排版标题能力"],"dependencies":[],"platform":["web"],"events":{"onEditStart":"编辑开始时","onChange":"编辑内容变化时","onEditEnd":"编辑结束时","onCopy":"复制时"},"schemas":[{"type":"object","title":"排版标题配置","fieldName":"typoTitle","properties":{"text":{"type":"string","title":"标题文本","default":""},"heading":{"type":"select","title":"标题类型","options":{"1":"标题1","2":"标题2","3":"标题3","4":"标题4","5":"标题5","6":"标题6"},"default":"1"}}},{"type":"internal","key":"typoCommon","title":"基础排版配置","fieldName":"typoCommonConfig"},{"type":"internal","key":"typoEllipsis","title":"排版溢出省略配置","fieldName":"typoEllipsisConfig"}],"tenonProps":{}}}}}